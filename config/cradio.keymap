// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <140>;
            quick-tap-ms = <120>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <2 1>;
            then-layer = <4>;
        };
    };

    combos {
        compatible = "zmk,combos";

        hiragana {
            bindings = <&kp LANGUAGE_1>;
            key-positions = <24 23>;
        };

        eisu {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <25 26>;
        };

        kagikakkoL {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <13 12>;
        };

        kagikakkoR {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <16 17>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <8 9>;
        };

        marukakkoL {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <13 11>;
        };

        marukakkoR {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 18>;
        };

        layer6 {
            bindings = <&mo 6>;
            key-positions = <4 3>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LEFT_GUI Q      &kp W  &kp E  &kp R      &kp T                   &kp Y                  &kp U            &kp I      &kp O    &kp P
&ht LEFT_CONTROL A  &kp S  &kp D  &kp F      &kp G                   &kp H                  &kp J            &kp K      &kp L    &mt RIGHT_GUI MINUS
&mt LEFT_ALT Z      &kp X  &kp C  &kp V      &kp B                   &kp N                  &kp M            &kp COMMA  &kp DOT  &kp EXCLAMATION
                                  &lt 1 TAB  &ht LEFT_SHIFT SPACE    &ht RIGHT_SHIFT ENTER  &lt 2 BACKSPACE
            >;
        };

        left_layer {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2    &kp NUMBER_3       &kp NUMBER_4     &kp NUMBER_5    &kp AMPERSAND   &kp AT           &kp PLUS   &kp ASTERISK  &kp SEMICOLON
&kp NUMBER_6  &kp NUMBER_7    &kp NUMBER_8       &kp NUMBER_9     &kp NUMBER_0    &kp EQUAL       &kp EXCLAMATION  &kp MINUS  &kp QUESTION  &kp HASH
&kp GRAVE     &kp LEFT_BRACE  &kp DOUBLE_QUOTES  &kp RIGHT_BRACE  &trans          &kp UNDERSCORE  &kp SLASH        &kp COLON  &kp PERCENT   &kp QMARK
                                                 &trans           &trans          &trans          &kp DELETE
            >;
        };

        right_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans              &trans          &kp UP_ARROW    &trans       &kp TAB
&trans  &trans  &trans  &trans  &trans    &kp RG(LEFT_ARROW)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT    &kp RG(RIGHT_ARROW)
&trans  &trans  &trans  &trans  &trans    &trans              &kp PAGE_DOWN   &trans          &kp PAGE_UP  &bootloader
                        &trans  &trans    &trans              &trans
            >;
        };

        none {
            bindings = <
&kp Q             &kp W  &kp E           &kp R           &kp T         &kp Y      &kp U            &kp I            &kp O    &kp P
&ht LCTRL A       &kp S  &ht LEFT_ALT D  &ht LEFT_GUI F  &kp G         &kp H      &ht RIGHT_GUI J  &ht RIGHT_ALT K  &kp L    &lt 5 ENTER
&ht LEFT_SHIFT Z  &kp X  &kp C           &kp V           &kp B         &kp N      &kp M            &kp COMMA        &kp DOT  &ht RIGHT_SHIFT EXCLAMATION
                                         &lt 1 TAB       &kp LSHIFT    &kp SPACE  &lt 2 TAB
            >;
        };

        tri_layer {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &bt BT_SEL 0    &bt BT_SEL 2  &out OUT_TOG  &trans          &trans  &trans
&kp F5  &kp F6   &kp F7   &kp F8   &bt BT_SEL 1    &bt BT_SEL 3  &trans        &studio_unlock  &trans  &trans
&kp F9  &kp F10  &kp F11  &kp F12  &bt BT_CLR      &bt BT_SEL 4  &trans        &trans          &trans  &trans
                          &trans   &trans          &trans        &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                        &trans  &trans    &trans  &trans
            >;
        };

        media {
            bindings = <
&trans         &trans                &trans  &trans      &trans            &bt BT_SEL 0  &bt BT_SEL 1       &bt BT_SEL 2      &bt BT_SEL 3     &bt BT_SEL 4
&kp LC(LS(A))  &kp LG(LS(NUMBER_4))  &trans  &trans      &trans            &trans        &kp C_PREVIOUS     &kp C_PLAY_PAUSE  &kp C_NEXT       &trans
&trans         &trans                &trans  &trans      &bootloader       &trans        &kp C_VOLUME_DOWN  &trans            &kp C_VOLUME_UP  &trans
                                             &bt BT_CLR  &bt BT_CLR_ALL    &out OUT_TOG  &bootloader
            >;
        };
    };
};
